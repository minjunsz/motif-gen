# pylint: disable=all
from __future__ import annotations

from typing import Optional, Sequence, overload

class Mol:
    def GetNumAtoms(self) -> int: ...
    def GetNumConformers(self) -> int: ...
    def GetConformer(self, id: int = -1) -> Conformer: ...
    def GetAtoms(self) -> Sequence[Atom]: ...
    def HasSubstructMatch(
        self,
        query: Mol,
        recursionPossible: bool = True,
        useChirality: bool = False,
        useQueryQueryMatches: bool = False,
    ) -> bool: ...
    def GetSubstructMatch(
        self, query: Mol, useChirality: bool = False, useQueryQueryMatches: bool = False
    ) -> tuple[int, ...]: ...

class Atom:
    def GetPDBResidueInfo(self) -> Optional[AtomPDBResidueInfo]: ...

class Conformer:
    def Is3D(self) -> bool: ...

class AtomPDBResidueInfo:
    def GetResidueNumber(self) -> int: ...
    def GetResidueName(self) -> str: ...

def GetPeriodicTable() -> PeriodicTable: ...

class PeriodicTable:
    @overload
    def GetAbundanceForIsotope(self, symbol: str, isotope: int) -> float: ...
    @overload
    def GetAbundanceForIsotope(self, atomicNum: int, isotope: int) -> float: ...
    def GetAtomicNumber(self, symbol: str) -> int: ...
    @overload
    def GetAtomicWeight(self, symbol: str) -> float: ...
    @overload
    def GetAtomicWeight(self, atomicNum: int) -> float: ...
    @overload
    def GetDefaultValence(self, symbol: str) -> int: ...
    @overload
    def GetDefaultValence(self, atomicNum: int) -> int: ...
    def GetElementName(self, atomicNum: int) -> str: ...
    def GetElementSymbol(self, atomicNum: int) -> str: ...
    @overload
    def GetMassForIsotope(self, symbol: str, isotope: int) -> float: ...
    @overload
    def GetMassForIsotope(self, atomicNum: int, isotope: int) -> float: ...
    @overload
    def GetMostCommonIsotope(self, symbol: str) -> int: ...
    @overload
    def GetMostCommonIsotope(self, atomicNum: int) -> int: ...
    @overload
    def GetMostCommonIsotopeMass(self, symbol: str) -> float: ...
    @overload
    def GetMostCommonIsotopeMass(self, atomicNum: int) -> float: ...
    @overload
    def GetNOuterElecs(self, symbol: str) -> int: ...
    @overload
    def GetNOuterElecs(self, atomicNum: int) -> int: ...
    @overload
    def GetRb0(self, symbol: str) -> float: ...
    @overload
    def GetRb0(self, atomicNum: int) -> float: ...
    @overload
    def GetRcovalent(self, symbol: str) -> float: ...
    @overload
    def GetRcovalent(self, atomicNum: int) -> float: ...
    @overload
    def GetRvdw(self, symbol: str) -> float: ...
    @overload
    def GetRvdw(self, atomicNum: int) -> float: ...

class BondType(int):
    AROMATIC: BondType
    DATIVE: BondType
    DATIVEL: BondType
    DATIVEONE: BondType
    DATIVER: BondType
    DOUBLE: BondType
    FIVEANDAHALF: BondType
    FOURANDAHALF: BondType
    HEXTUPLE: BondType
    HYDROGEN: BondType
    IONIC: BondType
    ONEANDAHALF: BondType
    OTHER: BondType
    QUADRUPLE: BondType
    QUINTUPLE: BondType
    SINGLE: BondType
    THREEANDAHALF: BondType
    THREECENTER: BondType
    TRIPLE: BondType
    TWOANDAHALF: BondType
    UNSPECIFIED: BondType
    ZERO: BondType

    names: dict[str, BondType]
    values: dict[int, BondType]
