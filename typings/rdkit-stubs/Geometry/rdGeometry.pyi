# pylint: disable=all

from __future__ import annotations

from typing import overload

class Point2D:
    @overload
    def __init__(self, other: Point3D) -> None: ...
    @overload
    def __init__(self, x: float, y: float) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def AngleTo(self, point: Point2D) -> float: ...
    def DirectionVector(self, point: Point2D) -> Point2D: ...
    def DotProduct(self, point: Point2D) -> float: ...
    def Length(self) -> float: ...
    def LengthSq(self) -> float: ...
    def Normalize(self) -> None: ...
    def SignedAngleTo(self, point: Point2D) -> float: ...
    @property
    def x(self) -> float: ...
    @x.setter
    def x(self, _x: float) -> None: ...
    @property
    def y(self) -> float: ...
    @y.setter
    def y(self, _y: float) -> None: ...

class Point3D:
    @overload
    def __init__(self, x: float, y: float, z: float) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def AngleTo(self, point: Point3D) -> float: ...
    def CrossProduct(self, point: Point3D) -> Point3D: ...
    def DirectionVector(self, point: Point3D) -> Point3D: ...
    def Distance(self, point: Point3D) -> float: ...
    def DotProduct(self, point: Point3D) -> float: ...
    def Length(self) -> float: ...
    def LengthSq(self) -> float: ...
    def Normalize(self) -> None: ...
    def SignedAngleTo(self, point: Point3D) -> float: ...
    @property
    def x(self) -> float: ...
    @x.setter
    def x(self, _x: float) -> None: ...
    @property
    def y(self) -> float: ...
    @y.setter
    def y(self, _y: float) -> None: ...
    @property
    def z(self) -> float: ...
    @z.setter
    def z(self, _z: float) -> None: ...
